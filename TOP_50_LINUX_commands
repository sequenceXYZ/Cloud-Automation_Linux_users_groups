--------------------------------------
### System Info Commands ###
--------------------------------------
# shows the name of the system host
hostname

# shows the host id of the system assigned by the OS
hostid 

# shows the current date and time in UTC format.
date 

# shows the elapsed time duration since the machine logged in
uptime 

# unix name
uname

# clears the screen.
clear

# lists all the commands executed until now
history 

# Super User Do.
sudo su - USERNAME

# shows the exit status of the last executed command (0 - success, 1-255 - error/failure)
echo $? 

# restart the machine immediately (-r restart)
shutdown -r now

# displays all the environment variables of the Linux system
printenv

# shows previous logins in the Linux system
last

# System Control: Manage system services using systemd
systemctl status sshd



--------------------------------------
### File Commands ###
--------------------------------------
#creates an empty file or updates timestamp of the existing file
touch <fileName> - creates a single empty file.
touch <file1> <file2> - creates file1, file2 empty files.

# concatenates and displays the contents of files
cat <fileName> - displays the contents of the file.
cat > <fileName> - creates a new file, allows to input content interactively and redirects inputted content to the created file (> redirection operator).

# displays first 10 lines of the file by default
head <fileName> 

# displays first 5 lines of the file (-n number)
head -n 5 <fileName> 

# displays the last 10 lines of the file by default
tail <fileName>

# displays contents of the file in real-time even when the file is rotated or replaced (used for log file monitoring)
tail -F <fileName>

# used to view large files (log files) in a paginated manner
less <fileName> 

# remove command
rm <fileName> - removes the file.
rm -r <dirName> - removes files & folders of directory recursively (-r recursive).
rm -rf <dirName> - force remove the files & folders of directory recursively (-f force).

# copy command
cp <source> <destination> - copy the files and folders from source to destination.
cp -r <dir1> <dir2> - copy dir1 directory to dir2 directory recursively (-r recursive).
Example: cp -r ./sourceDir ./destiDir



--------------------------------------
### File Permission Commands ###
--------------------------------------
# shows the permissions of the file
ls -l <pathOfFileName> 

# shows the permissions of the directory
ls -ld <dirNamePath> 

# changes mode/permissions of the file
chmod <octalNumber> <fileName>

# changes mode/permissions of the directory recursively
chmod <octalNumber> -R <dirName>

# changes the user ownership of a file
chown <newUser> <fileName>

# changes the user & group ownerships of a file
chown <newUser>:<newGroup> <fileName> - changes the user & group ownerships of a file.

# updates the group name for file/directory
chgrp <groupName> <fileName/dirName> 

# shows the file/directory access control list
getfacl <fileName/dirName> 

# modifies the current acl of the file/directory
setfacl -m u:<userName>:rwx <fileName/dirName>

# removes the acl permissions for the file/directory
setfacl -x u:<userName>: <fileName/dirName>

# modifies the group acls for the file/director
setfacl -m g:<groupName>:rwx <fileName/dirName>

#  removes the group acl permissions for the file/directory
setfacl -x g:<groupName>: <fileName/dirName>



--------------------------------------
### File Permission Octal Numbers ###
--------------------------------------
read (r) — 4, write (w)- 2, execute (x) — 1



--------------------------------------
### User Management Commands ###
--------------------------------------
# Total connect time for all users or specified users
ac
# The ac command reads the /var/log/wtmp file, which contains binary data about every login, logout, system event, and current status on the system. 

# display total login time of a specific user.
ac john

# display total login time for each user.
ac -p

# display total login time for each day.
ac -d

# display total login time for the current day.
ac -d -p

# display login time from a specific log file.
ac -f /var/log/wtmp



--------------------------------------
### User create & delete & modify Commands ###
--------------------------------------
# Creates a user account
useradd 

# Creates user account without home & mail spool directories
useradd <userName>

Creates user account with home & mail spool directories.
useradd -m <userName>

# password for the user and then stores it in the /etc/shadow file.
passwd <userName> 

# deletes the user from the system.
userdel <userName>

# deletes the user from the system along with home and mail spool directories.
userdel -r <userName> 

# stores information about user accounts
/etc/passwd 
cat /etc/passwd - displays the complete list of users on that machine.

stores the password for users in an encrypted format.
/etc/shadow 
cat /etc/shadow - displays the complete list of user passwords on that machine.

# stores information about user groups
/etc/group
cat /etc/group

# to see in whoch groups users are
group <userName>

# substitute user
su - <userName>

# to logout from that user
exit

# adds the user to another group (-aG append the user to the group without removing from other groups)
usermod -aG <groupName> <userName> 

# change shell
chsh

# changes the shell to bash for the user
chsh -s /bin/bash <user>

# changes the shell to sh for the user
chsh -s /bin/sh <user>



--------------------------------------
### Group Management Commands ###
--------------------------------------
# creates the group
groupadd <groupName> 

# delete the group
groupdel <groupName> 

#stores the information of the group
/etc/group

# displays the complete list of groups on that machine
cat /etc/group

# creates a password for the group
gpasswd <groupName>

# adds the user to the group
gpasswd -a <userName> <groupName> 

# removes the user from the group
gpasswd -d <userName> <groupName>

# adds multiple users to the group and removes the existing ones of the group
gpasswd -M <userName1>,<userName2>,<userName3> <groupName>



--------------------------------------
Searching Commands
--------------------------------------
# Search for files/directories based on their names
find 

# finds the mentioned file if available in the current directory
find . -name <fileName> 

# finds the mentioned file in the directory
find <dirName> -name <fileName>

# finds the files in the directory having 754 permission
find <dirName> -perm 754

# locate is faster for finding files by name due to its pre-built database, while find is more versatile, allowing complex searches based on various criteria in real-time.
# Search for files/directories based on their names
locate 

# locates the file/directory and displays the path
locate <fileName/dirName>
Example: locate crazy.txt

# GREP Command — Global Regular Expression Print
grep <textToSearch> <fileName> - used to find text patterns within files.
grep -i <textToSearch> <fileName> - used to find text patterns within the file ignoring the case (-i ignore case).
grep -v <textToSearch> <fileName> - used to find non matching lines of text patterns (-v invert-match).
grep -l <textToSearch> <fileNames> - used to display the matching string file names.
Example: grep -l welcome crazy.txt
There are additional commands related to grep.
egrep (or grep -E)
fgrep (or grep -F)
zgrep (for compressed files)
zegrep (or zgrep -E for compressed files)
bzgrep (for compressed files)
ack-grep (Ack)




--------------------------------------
Hardware Infomation Commands
--------------------------------------
# display system memory information in human-readable format (-h).
free -h

# displays the disk space usage of mounted file systems
df -h 

# disk usage
du 

# Display disk usage information in human-readable format.
du -h 

# Display the total size of the directory in human-readable format, summarizing the size instead of listing individual file sizes.
du -sh

# Displays the total size of the file/directory
du -sh <fileName/dirName> 



--------------------------------------
Connection To Remote System
--------------------------------------
# Secure Shell: Connect to a remote server securely.
ssh 
Example: ssh user@remote_host
Example: ssh 123.456.789.1

# Securely Copy Files: Copy files between local and remote systems using SSH.
scp 
Example: scp file.txt user@remote_host:/path

# Remote Sync: Synchronize files and directories between systems
rsync 
Example: rsync -avz local_folder/ user@remote_host:remote_folder/



--------------------------------------
Network Commands
--------------------------------------
# Simple tcp proxy, network daemon testing
nc
Example: nc -vz google.com 443

# tests the reachability & responsiveness of the remote host.
ping <hostName> 
Example: ping google.com -c 2 (-c pings 2 times)

# Shows DNS information of the domain
dig <domainName> 
Example: dig medium.com

# Used to retrieve/download files from the internet.
wget <url>

# client URL
curl 

# Used to retrieve/download files from the internet
curl <url> 

# Display available network interfaces.
ifconfig

# Display and manipulate network interface info
ip addr 

# Shows the public ip address of the machine
curl ifconfig.me 

# shows all tcp open ports (-a all, t-tcp, n-active, p protocol)
netstat -antp- shows all tcp open ports (-a all, t-tcp, n-active, p protocol).

races the route using packets from source to destination host
traceroute <url> 



--------------------------------------
Process Information Commands
--------------------------------------
# Displays the currently running process.
ps

Displays the process of the username
ps -u <userName>

# Displays all the processes of the system
ps -ef 

# Shows the real-time, dynamic view of the running processes of a system
top 

# Gracefully terminates the process pid(-9 forcefull)
kill <pid>

# shows process id of processes based on name/other criteria
pgrep <processName> 

# background, sends the process to the background & continues execution without interruption
bg 

# foreground, brings the process to the foreground and makes it an active process.
fg 

# no hangup, runs command/script in the background even after the terminal is closed or the user logs out
nohup 
Example: nohup ./script.sh

# Using in last of command runs in background, allowing you to continue using the terminal while the command runs asynchronously.
<command> & 
Example: ./script.sh &



--------------------------------------
Archiving File Commands
--------------------------------------
# tape archive.
tar

# reates the tar file with the fileName for the directory mentioned (-c create, -v verbose, -f output file name)
tar -cvf <fileName> <directory> 

# puts the extracted files into the destination directory (-x extract, -v verbose, -f source tar file name, -C change the folder and download to destination dir).
tar -xvf <sourceTarFileName> -C <destinationDir>



--------------------------------------
Ubuntu Package related Commands
--------------------------------------
#  Package Manager for Debian-based Linux distributions Eg: Ubuntu.
apt
apt-get - Older version and basic package manager.

# Updates the package list
apt update

# Lists all the installed packages
apt list --installed

# shows the package name if it's installed
apt list --installed <packageName> 

# shows information about a package mentione
apt show <packageName>

# searches and shows the list of packages
apt search <packageName> 

# installs the required package
apt install <packageName> 

# removes the required package
apt remove <packageName> 

# removes the required package along with its config files.
apt purge <packageName> 
# Note: For other package manager just replace “apt” with other package manager



--------------------------------------
Directory Commands
--------------------------------------
# shows the present working directory (abbr. Print Working Directory)
pwd 

# change directory
cd 

# changes to its parent directory (i.e) one level up
cd ..

# change to the directory mentioned.
cd <dirName> 

# changes to the currently logged in user's home directory
cd ~ or cd 

# changes the directory two levels up
cd ../.. 

# changes to the last working directory
cd - 

# make directory
mkdir <dirName>

# creates directory with its parent directories if it does not exists (-p parent)
mkdir -p <pathOftheDir> 

# lists the files & folders of the directory you are in.
# lists all files & folders along with hidden files (-a all).
ls -a
# lists all files & folders along with hidden files in a formatted manner (-l long listing format).
ls -al 
lists folder
ls -ld <dirName>



--------------------------------------
Misc Commands
--------------------------------------
# Displays the manual page for a specific command. Provides detailed information and usage instructions
man 

# Edits a stream of text by substituting occurrences of a pattern with another.
sed 

# different commands
awk - A powerful programming language for text processing.
wc -(Word Count)
ln -(Create Links):
stat <fileName/dirName> - shows detailed information about the file or directory.
cron - system daemon for managing scheduled tasks.
crontab -Used to create, edit, and manage cron jobs.
tree - Representation of files and directories of a specific directory.
echo "sample text" | grep text - The output of the first command is passed as an input to the second command using the pipe (|) symbol.
ls -l | tee file.txt - Redirects the list to the file.txt and simultaneously displays it in the terminal.
echo "sample text" > <fileName> - Write the content to the file mentioned by overwriting the existing content (> redirection operator).
echo "new sample text" >> <fileName> - Appends the contents to the file mentioned without overwriting the existing content (>> redirection operation).
Linux Commands for DevOps CheatSheet read more
